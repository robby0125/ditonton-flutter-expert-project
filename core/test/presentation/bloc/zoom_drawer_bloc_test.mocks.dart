// Mocks generated by Mockito 5.3.0 from annotations
// in core/test/presentation/bloc/zoom_drawer_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i2;
import 'package:flutter_zoom_drawer/config.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeElement_0 extends _i1.SmartFake implements _i2.Element {
  _FakeElement_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_1 extends _i1.SmartFake
    implements _i2.DiagnosticsNode {
  _FakeDiagnosticsNode_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);

  @override
  String toString(
          {_i3.TextTreeConfiguration? parentConfiguration,
          _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [ZoomDrawerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockZoomDrawerController extends _i1.Mock
    implements _i4.ZoomDrawerController {
  MockZoomDrawerController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set open(void Function()? _open) =>
      super.noSuchMethod(Invocation.setter(#open, _open),
          returnValueForMissingStub: null);
  @override
  set close(void Function()? _close) =>
      super.noSuchMethod(Invocation.setter(#close, _close),
          returnValueForMissingStub: null);
  @override
  set toggle(void Function({bool forceToggle})? _toggle) =>
      super.noSuchMethod(Invocation.setter(#toggle, _toggle),
          returnValueForMissingStub: null);
  @override
  set isOpen(bool Function()? _isOpen) =>
      super.noSuchMethod(Invocation.setter(#isOpen, _isOpen),
          returnValueForMissingStub: null);
  @override
  set stateNotifier(_i2.ValueNotifier<_i4.DrawerState>? _stateNotifier) =>
      super.noSuchMethod(Invocation.setter(#stateNotifier, _stateNotifier),
          returnValueForMissingStub: null);
}

/// A class which mocks [Widget].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockWidget extends _i1.Mock implements _i2.Widget {
  MockWidget() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Element createElement() =>
      (super.noSuchMethod(Invocation.method(#createElement, []),
              returnValue:
                  _FakeElement_0(this, Invocation.method(#createElement, [])))
          as _i2.Element);
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toStringShallow(
          {String? joiner = r', ',
          _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toStringShallow, [], {#joiner: joiner, #minLevel: minLevel}),
          returnValue: '') as String);
  @override
  String toStringDeep(
          {String? prefixLineOne = r'',
          String? prefixOtherLines,
          _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(#toStringDeep, [], {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel
          }),
          returnValue: '') as String);
  @override
  _i2.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i3.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #toDiagnosticsNode, [], {#name: name, #style: style}),
              returnValue: _FakeDiagnosticsNode_1(
                  this,
                  Invocation.method(
                      #toDiagnosticsNode, [], {#name: name, #style: style})))
          as _i2.DiagnosticsNode);
  @override
  List<_i2.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(Invocation.method(#debugDescribeChildren, []),
          returnValue: <_i2.DiagnosticsNode>[]) as List<_i2.DiagnosticsNode>);
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}
